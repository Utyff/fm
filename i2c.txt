
// ======
//#define RCC_I2C1CLKSOURCE_PCLK1          (0x00000000U) 
//#define RCC_I2C1CLKSOURCE_SYSCLK         RCC_CCIPR_I2C1SEL_0
//#define RCC_I2C1CLKSOURCE_HSI            RCC_CCIPR_I2C1SEL_1
//#define __HAL_RCC_I2C1_CONFIG(__I2C1_CLKSOURCE__) \
//    MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2C1SEL, (uint32_t)(__I2C1_CLKSOURCE__)) // RCC_I2C1CLKSOURCE_PCLK1 = 0

    SET_BIT(RCC->APB1ENR, (RCC_APB1ENR_I2C1EN));

    //__HAL_I2C_DISABLE(hi2c);
    CLEAR_BIT(I2C1->CR1, I2C_CR1_PE);

#define TIMING_CLEAR_MASK   (0xF0FFFFFFU)  // !< I2C TIMING clear register Mask
    I2C1->TIMINGR = 0x00707CBBu & TIMING_CLEAR_MASK;

    // Disable Own Address1 before set the Own Address1 configuration
    I2C1->OAR1 &= ~I2C_OAR1_OA1EN;
    // Disable Own Address2 before set the Own Address2 configuration
    I2C1->OAR2 &= ~I2C_DUALADDRESS_ENABLE;

    // Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process
    I2C1->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);

    // Configure I2Cx: Generalcall and NoStretch mode
    //                I2C_GENERALCALL_DISABLE | I2C_NOSTRETCH_DISABLE
    //I2C1->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
    //I2C1->CR1 = (0 | 0);


    // Set analog filter bit
    //hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
    //hi2c->Instance->CR1 |= AnalogFilter;    // 0


    // Enable the selected I2C peripheral
    //__HAL_I2C_ENABLE(hi2c);
    SET_BIT(I2C1->CR1,  I2C_CR1_PE);

// ======
